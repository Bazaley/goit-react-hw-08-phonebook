{"version":3,"file":"static/js/53.fab86fcf.chunk.js","mappings":"sPAEaA,EAAKC,EAAAA,GAAAA,GAAH,kFAMFC,EAAKD,EAAAA,GAAAA,GAAH,wNAUFE,EAASF,EAAAA,GAAAA,OAAH,6IAEG,SAAAG,GAAK,OAAKA,EAAMC,OAAS,OAAS,KAA7B,I,uCCgB3B,EA/BsB,WACpB,OAAwBC,EAAAA,EAAAA,WAASC,EAAAA,EAAAA,IAAYC,EAAAA,IAAqBC,MAAlE,eAAOA,EAAP,KAAaC,EAAb,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAUN,EAAAA,EAAAA,IAAYC,EAAAA,IAW5B,OACE,iBAAMM,SANa,SAAAC,GACnBA,EAAEC,iBACFL,GAASM,EAAAA,EAAAA,KAAc,kBAAKJ,GAAN,IAAeJ,KAAAA,KACtC,EAGC,UACE,4BACE,kBACES,KAAK,OACLT,KAAK,OACLU,MAAOV,EACPW,SAhBa,SAAC,GAA2B,IAAfD,EAAc,EAAxBE,OAAUF,MAChCT,EAAQS,EACT,EAeOG,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,OAKjB,E,UCtBYC,EAAe,WAC1B,IAAMC,GAAWnB,EAAAA,EAAAA,IAAYoB,EAAAA,IACvBC,GAASrB,EAAAA,EAAAA,IAAYsB,EAAAA,IACrBhB,GAAUN,EAAAA,EAAAA,IAAYC,EAAAA,IAEtBG,GAAWC,EAAAA,EAAAA,MAEjB,OACE,2BACGc,EACEE,QAAO,qBAAGnB,KAAgBqB,cAAcC,SAASH,EAAOE,cAAjD,IACPE,KAAI,YAA2B,IAAxBC,EAAuB,EAAvBA,GAAIxB,EAAmB,EAAnBA,KAAMyB,EAAa,EAAbA,OAChB,OACE,UAAClC,EAAD,YACE,SAACE,EAAD,WAAY,OAAPW,QAAO,IAAPA,OAAA,EAAAA,EAASJ,QAASA,GAAO,SAAC,EAAD,IAAoBA,KAClD,SAACP,EAAD,UAAKgC,KACL,SAAChC,EAAD,WACE,SAACC,EAAD,CACEE,QAAM,EACN8B,QAAS,kBAAMxB,GAASyB,EAAAA,EAAAA,GAAc,CAAEH,GAAAA,EAAIxB,KAAAA,EAAMyB,OAAAA,IAAzC,EAFX,uBAOF,SAAChC,EAAD,WACE,SAACC,EAAD,CAAQgC,QAAS,kBAAMxB,GAAS0B,EAAAA,EAAAA,IAAcJ,GAA7B,EAAjB,wBAZKA,EAkBZ,KAGR,E,UC3CYK,EAAQrC,EAAAA,GAAAA,MAAH,+JAQLsC,EAAQtC,EAAAA,GAAAA,MAAH,sDAILuC,EAAKvC,EAAAA,GAAAA,GAAH,iLAUFwC,EAAMxC,EAAAA,GAAAA,IAAH,mGAEUyC,GCiC1B,EA9CiB,WAMf,OACE,SAACD,EAAD,WACE,UAACH,EAAD,YACE,SAACC,EAAD,WACE,2BACE,SAACC,EAAD,oBACA,SAACA,EAAD,sBACA,SAACA,EAAD,sBACA,SAACA,EAAD,2BAGJ,SAACf,EAAD,QA2BP,C","sources":["components/ContactsList/ContactsList.styled.js","components/UpdateContact/UpdateContact.jsx","components/ContactsList/ContactsList.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Tr = styled.tr`\n  &:nth-child(2n) {\n    background-color: #e3f4f5;\n  }\n`;\n\nexport const Td = styled.td`\n  padding: 15px 0;\n  font-weight: 500;\n  color: rgba(0, 0, 0, 0.5);\n  text-align: center;\n  text-transform: capitalize;\n  &:not(:last-child) {\n    border-right: 1px solid #dad3d3;\n  }\n`;\nexport const Button = styled.button`\n  width: 100px;\n  background-color: ${props => (props.rename ? 'blue' : 'red')};\n  color: white;\n  border: none;\n  padding: 4px;\n  border-radius: 4px;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { selectRenameContact } from 'redux/selectors';\nimport { updateContact } from 'redux/contacts/contacts-operations';\nimport { useState } from 'react';\n\nconst UpdateContact = () => {\n  const [name, setName] = useState(useSelector(selectRenameContact).name);\n  const dispatch = useDispatch();\n  const contact = useSelector(selectRenameContact);\n\n  const handleChange = ({ target: { value } }) => {\n    setName(value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(updateContact({ ...contact, name }));\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n    </form>\n  );\n};\n\nexport default UpdateContact;\n","import { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectFilterContact,\n  selectContacts,\n  selectRenameContact,\n} from 'redux/selectors';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\n\nimport { Tr, Td, Button } from './ContactsList.styled';\nimport UpdateContact from '../UpdateContact/UpdateContact';\nimport { renameContact } from 'redux/contacts/contactsSlice';\n\nexport const ContactsList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilterContact);\n  const contact = useSelector(selectRenameContact);\n\n  const dispatch = useDispatch();\n\n  return (\n    <tbody>\n      {contacts\n        .filter(({ name }) => name.toLowerCase().includes(filter.toLowerCase()))\n        .map(({ id, name, number }) => {\n          return (\n            <Tr key={id}>\n              <Td>{contact?.name === name ? <UpdateContact /> : name}</Td>\n              <Td>{number}</Td>\n              <Td>\n                <Button\n                  rename\n                  onClick={() => dispatch(renameContact({ id, name, number }))}\n                >\n                  rename\n                </Button>\n              </Td>\n              <Td>\n                <Button onClick={() => dispatch(deleteContact(id))}>\n                  delete\n                </Button>\n              </Td>\n            </Tr>\n          );\n        })}\n    </tbody>\n  );\n};\n","import styled from 'styled-components';\nimport image from '../../images/1642991819_1-phonoteka-org-p-fon-dlya-prezentatsii-kniga-raskritaya-1.png';\n\nexport const Table = styled.table`\n  min-width: 600px;\n  margin: 0 auto;\n  border-collapse: collapse;\n  background-color: white;\n  box-shadow: 3px 3px 13px #4d4949;\n`;\n\nexport const Thead = styled.thead`\n  background-color: #3cacc5;\n`;\n\nexport const Th = styled.th`\n  min-width: 100px;\n  padding: 15px 0;\n  color: white;\n  text-transform: uppercase;\n  &:not(:last-child) {\n    border-right: 1px solid white;\n  }\n`;\n\nexport const Box = styled.div`\n  height: 100vh;\n  background-image: url(${image});\n  background-size: cover;\n`;\n","import { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Table, Thead, Th, Box } from './Contacts.styled';\n\n// import { useSelector, useDispatch } from 'react-redux';\n// import {\n//   selectFilterContact,\n//   selectContacts,\n//   selectRenameContact,\n// } from 'redux/selectors';\n// import { deleteContact } from 'redux/contacts/contacts-operations';\n\n// import UpdateContact from 'components/UpdateContact/UpdateContact';\n// import { renameContact } from 'redux/contacts/contactsSlice';\n\nconst Contacts = () => {\n  // const contacts = useSelector(selectContacts);\n  // const filter = useSelector(selectFilterContact);\n  // const contact = useSelector(selectRenameContact);\n\n  // const dispatch = useDispatch();\n  return (\n    <Box>\n      <Table>\n        <Thead>\n          <tr>\n            <Th>Name</Th>\n            <Th>Number</Th>\n            <Th>Rename</Th>\n            <Th>Delete</Th>\n          </tr>\n        </Thead>\n        <ContactsList />\n      </Table>\n    </Box>\n    // <Box>\n    //   <ul>\n    //     {contacts.map(({ id, name, number }) => {\n    //       return (\n    //         <li key={id}>\n    //           <p>{contact?.name === name ? <UpdateContact /> : name}</p>\n    //           <p>{number}</p>\n\n    //           <button\n    //             rename\n    //             onClick={() => dispatch(renameContact({ id, name, number }))}\n    //           >\n    //             rename\n    //           </button>\n\n    //           <button onClick={() => dispatch(deleteContact(id))}>\n    //             delete\n    //           </button>\n    //         </li>\n    //       );\n    //     })}\n    //   </ul>\n    // </Box>\n  );\n};\n\nexport default Contacts;\n"],"names":["Tr","styled","Td","Button","props","rename","useState","useSelector","selectRenameContact","name","setName","dispatch","useDispatch","contact","onSubmit","e","preventDefault","updateContact","type","value","onChange","target","pattern","title","required","ContactsList","contacts","selectContacts","filter","selectFilterContact","toLowerCase","includes","map","id","number","onClick","renameContact","deleteContact","Table","Thead","Th","Box","image"],"sourceRoot":""}