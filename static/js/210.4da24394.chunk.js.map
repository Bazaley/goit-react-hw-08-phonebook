{"version":3,"file":"static/js/210.4da24394.chunk.js","mappings":"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","sources":["components/Particle/Particle.jsx","components/Section/Section.styled.js","components/Section/Section.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.js","components/UpdateContact/UpdateContact.styled.js","components/UpdateContact/UpdateContact.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { useCallback } from 'react';\nimport Particles from 'react-tsparticles';\nimport { loadFull } from 'tsparticles';\n\nconst Particle = () => {\n  const particlesInit = useCallback(async engine => {\n    await loadFull(engine);\n  }, []);\n\n  return (\n    <Particles\n      id=\"tsparticles\"\n      init={particlesInit}\n      // options={{\n      //   fullScreen: {\n      //     zIndex: -1,\n      //   },\n      //   fpsLimit: 1000,\n      //   interactivity: {\n      //     events: {\n      //       onClick: {\n      //         enable: true,\n      //         mode: 'push',\n      //       },\n      //       onHover: {\n      //         enable: true,\n      //         mode: 'repulse',\n      //       },\n      //       resize: true,\n      //     },\n      //     modes: {\n      //       push: {\n      //         quantity: 4,\n      //       },\n      //       repulse: {\n      //         distance: 100,\n      //         duration: 0.4,\n      //       },\n      //     },\n      //   },\n\n      //   particles: {\n      //     color: {\n      //       value: '#0c4752',\n      //     },\n      //     links: {\n      //       color: '#08353b',\n      //       distance: 150,\n      //       enable: true,\n      //       opacity: 0.5,\n      //       width: 3,\n      //     },\n      //     collisions: {\n      //       enable: false,\n      //     },\n      //     move: {\n      //       directions: 'none',\n      //       enable: true,\n      //       outModes: {\n      //         default: 'bounce',\n      //       },\n      //       random: true,\n      //       speed: 2,\n      //       straight: true,\n      //     },\n      //     number: {\n      //       density: {\n      //         enable: true,\n      //         area: 700,\n      //       },\n      //       value: 50,\n      //     },\n      //     opacity: {\n      //       value: 0.5,\n      //     },\n      //     shape: {\n      //       type: 'circle',\n      //     },\n      //     size: {\n      //       value: { min: 4, max: 15 },\n      //     },\n      //   },\n      //   detectRetina: true,\n      // }}\n      options={{\n        fullScreen: {\n          zIndex: -1,\n        },\n        fpsLimit: 1000,\n\n        particles: {\n          number: {\n            value: 50,\n\n            density: {\n              enable: true,\n              value_area: 800,\n            },\n          },\n\n          opacity: {\n            value: 0.5,\n            random: false,\n            anim: {\n              enable: false,\n              speed: 3,\n              opacity_min: 0.1,\n              sync: false,\n            },\n          },\n          size: {\n            value: { min: 1, max: 2 },\n            random: true,\n          },\n          line_linked: {\n            enable: true,\n            distance: 200,\n            color: 'random',\n            opacity: 0.4,\n            width: 0,\n            triangles: {\n              enable: true,\n              color: '#ffffff',\n              opacity: 0.1,\n            },\n          },\n          move: {\n            enable: true,\n            speed: 1,\n            direction: 'none',\n            random: false,\n            straight: false,\n            out_mode: 'out',\n            attract: {\n              enable: false,\n              rotateX: 600,\n              rotateY: 1200,\n            },\n          },\n        },\n        interactivity: {\n          detect_on: 'canvas',\n          events: {\n            onhover: {\n              enable: true,\n              mode: 'repulse',\n            },\n            onclick: {\n              enable: true,\n              mode: 'push',\n            },\n            resize: true,\n          },\n        },\n        retina_detect: true,\n      }}\n    />\n  );\n};\n\nexport default Particle;\n","import styled from 'styled-components';\n\nexport const SectionTag = styled.section`\n  padding-top: 30px;\n  text-align: center;\n`;\n\nexport const TitleStyled = styled.h1`\n  margin-bottom: 30px;\n  text-shadow: 2px 1px white;\n`;\n","import PropTypes from 'prop-types';\n\nimport { SectionTag, TitleStyled } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <SectionTag>\n      {title && <TitleStyled>{title}</TitleStyled>}\n\n      {children}\n    </SectionTag>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.element.isRequired,\n};\n","import styled from 'styled-components';\nimport { ImCross } from 'react-icons/im';\nimport { RxUpdate } from 'react-icons/rx';\n\nexport const Item = styled.li`\n  width: calc((100% - 60px) / 3);\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  margin-bottom: 30px;\n  padding: 20px 0;\n  border: 2px solid gray;\n  border-radius: 4px;\n  box-sizing: border-box;\n  background: linear-gradient(\n    130deg,\n    #008080 50%,\n    #20b2aa,\n    #00ffff,\n    #48d1cc,\n    #00ced1\n  );\n  opacity: 0.9;\n\n  &:not(:nth-child(3n)) {\n    margin-right: 30px;\n  }\n`;\n\nexport const Paragraph = styled.p`\n  font-size: 18px;\n`;\n\nexport const Button = styled.button`\n  background-color: transparent;\n\n  border: none;\n  cursor: pointer;\n  &:not(:last-child) {\n    margin-right: 10px;\n  }\n`;\n\nexport const ImCrossStyled = styled(ImCross)`\n  color: black;\n  transition: color 250ms linear;\n\n  &:hover {\n    color: red;\n  }\n`;\n\nexport const GrUpdateStyled = styled(RxUpdate)`\n  color: black;\n  transition: color 250ms linear;\n\n  &:hover {\n    color: white;\n  }\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { selectFilterContact, selectContacts } from 'redux/selectors';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\nimport {\n  Button,\n  Item,\n  ImCrossStyled,\n  GrUpdateStyled,\n  Paragraph,\n} from './ContactsList.styled';\n\nimport { Avatar } from '@mui/material';\n\nexport const ContactsList = ({ setContact }) => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilterContact);\n\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      {contacts\n        .filter(({ name }) => name.toLowerCase().includes(filter.toLowerCase()))\n        .map(({ id, name, number }) => {\n          return (\n            <Item key={id}>\n              <Avatar\n                sx={{\n                  bgcolor: '#48d1cc',\n                }}\n              >\n                {name[0].toUpperCase()}\n              </Avatar>\n              <Paragraph>{name}</Paragraph>\n              <Paragraph>{number}</Paragraph>\n              <div>\n                <Button\n                  rename\n                  onClick={() => {\n                    setContact({ id, name, number });\n                  }}\n                >\n                  <GrUpdateStyled size={'20px'} />\n                </Button>\n                <Button onClick={() => dispatch(deleteContact(id))}>\n                  <ImCrossStyled size={'20px'} />\n                </Button>\n              </div>\n            </Item>\n          );\n        })}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nconst Span = styled.span`\n  display: block;\n  margin-bottom: 10px;\n  font-size: 20px;\n`;\n\nconst Input = styled.input`\n  display: block;\n  margin: 0 auto;\n  width: 300px;\n  height: 30px;\n  margin-bottom: 20px;\n  border: none;\n  border-radius: 10px;\n  text-align: center;\n`;\n\nexport { Span, Input };\n","import { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/filter/filterSlice';\nimport { Span, Input } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <label>\n      <Span>Find contacts by name</Span>\n\n      <Input\n        type=\"text\"\n        onChange={e => dispatch(filterContacts(e.target.value))}\n      />\n    </label>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n","import styled from 'styled-components';\n\nexport const FormTag = styled.form`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 400px;\n\n  padding: 30px 20px 20px;\n  border-radius: 4px;\n  box-shadow: 5px 5px 16px #756a6a;\n  background-color: #82acfb;\n  opacity: 0.9;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  width: 400px;\n  height: 23px;\n  border: none;\n  border-bottom: 1px solid black;\n  text-align: center;\n  outline: none;\n  background-color: transparent;\n  font-family: Acme;\n  font-size: 22px;\n  &::placeholder {\n    font-family: Acme;\n    font-size: 21px;\n    color: black;\n  }\n`;\n\nexport const Label = styled.label`\n  display: block;\n\n  margin-bottom: 45px;\n`;\n\nexport const ButtonForm = styled.button`\n  display: block;\n  width: 199px;\n  margin: 0 auto;\n  padding: 7px;\n  border-radius: 4px;\n  border: none;\n  background-color: #5c5cec;\n  color: white;\n  font-size: 17px;\n  font-family: Acme;\n  cursor: pointer;\n`;\n","import Backdrop from '@mui/material/Backdrop';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateContact } from 'redux/contacts/contacts-operations';\nimport { FormTag, Input, Label, ButtonForm } from './UpdateContact.styled';\n\nconst UpdateContact = ({ contact, setContact }) => {\n  const [open, setOpen] = useState(true);\n  const [name, setName] = useState(contact.name);\n  const [number, setNumber] = useState(contact.number);\n  const [id] = useState(contact.id);\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    dispatch(updateContact({ name, number, id }));\n    setContact(null);\n    setOpen(false);\n  };\n  return (\n    <Backdrop\n      open={open}\n      onClick={e => {\n        if (e.target.nodeName !== 'DIV') return;\n        setContact(null);\n        setOpen(false);\n      }}\n    >\n      <FormTag onSubmit={handleSubmit}>\n        <Label>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={e => setName(e.target.value)}\n            placeholder=\"Contact name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            autoComplete=\"off\"\n          />\n        </Label>\n        <Label>\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={e => setNumber(e.target.value)}\n            placeholder=\"Contact phone\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            autoComplete=\"off\"\n          />\n        </Label>\n\n        <ButtonForm type=\"sumbit\">Rename</ButtonForm>\n      </FormTag>\n    </Backdrop>\n  );\n};\n\nexport default UpdateContact;\n","import { useState } from 'react';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Section } from 'components/Section/Section';\nimport Particle from 'components/Particle/Particle';\nimport { Filter } from 'components/Filter/Filter';\nimport { List } from './Contacts.styled';\nimport UpdateContact from 'components/UpdateContact/UpdateContact';\n\nconst Contacts = () => {\n  const [contact, setContact] = useState(null);\n\n  return (\n    <>\n      <Section title=\"All your contacts are located here!\">\n        <>\n          <Filter />\n          <List>\n            <ContactsList setContact={setContact} />\n          </List>\n          {contact && (\n            <UpdateContact contact={contact} setContact={setContact} />\n          )}\n        </>\n      </Section>\n      <Particle />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["particlesInit","useCallback","engine","loadFull","id","init","options","fullScreen","zIndex","fpsLimit","particles","number","value","density","enable","value_area","opacity","random","anim","speed","opacity_min","sync","size","min","max","line_linked","distance","color","width","triangles","move","direction","straight","out_mode","attract","rotateX","rotateY","interactivity","detect_on","events","onhover","mode","onclick","resize","retina_detect","SectionTag","styled","TitleStyled","Section","title","children","Item","Paragraph","Button","ImCrossStyled","ImCross","GrUpdateStyled","RxUpdate","ContactsList","setContact","contacts","useSelector","selectContacts","filter","selectFilterContact","dispatch","useDispatch","name","toLowerCase","includes","map","Avatar","sx","bgcolor","toUpperCase","rename","onClick","deleteContact","Span","Input","Filter","type","onChange","e","filterContacts","target","List","FormTag","Label","ButtonForm","contact","useState","open","setOpen","setName","setNumber","Backdrop","nodeName","onSubmit","preventDefault","updateContact","placeholder","pattern","required","autoComplete","Particle"],"sourceRoot":""}